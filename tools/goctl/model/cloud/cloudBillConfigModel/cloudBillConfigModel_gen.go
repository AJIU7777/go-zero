// Code generated by goctl. DO NOT EDIT!

package cloudBillConfigModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cloudBillConfigFieldNames          = builder.RawFieldNames(&CloudBillConfig{}, true)
	cloudBillConfigRows                = strings.Join(cloudBillConfigFieldNames, ",")
	cloudBillConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(cloudBillConfigFieldNames, "bill_conf_id", "create_time", "update_time"), ",")
	cloudBillConfigRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(cloudBillConfigFieldNames, "bill_conf_id", "create_time", "update_time"))

	cachePublicCloudBillConfigBillConfIdPrefix = "cache:public:cloudBillConfig:billConfId:"
)

type (
	cloudBillConfigModel interface {
		Insert(ctx context.Context, data *CloudBillConfig) (sql.Result, error)
		FindOne(ctx context.Context, billConfId int64) (*CloudBillConfig, error)
		Update(ctx context.Context, data *CloudBillConfig) error
		Delete(ctx context.Context, billConfId int64) error
	}

	defaultCloudBillConfigModel struct {
		sqlc.CachedConn
		table string
	}

	CloudBillConfig struct {
		BillConfId  int64        `db:"bill_conf_id"` // ID
		ConfName    string       `db:"conf_name"`    // 配置名称
		ConfType    string       `db:"conf_type"`    // 配置类型 volume (硬盘容量)    nic_qos (网络带宽)     public_ip (公网IP)
		ConfNum     int64        `db:"conf_num"`     // 配置数量
		BillMode    string       `db:"bill_mode"`    // 计费模式 月: H 小时：M
		BillAmount  float64      `db:"bill_amount"`  // 金额 $
		Description string       `db:"description"`  // 详细描述
		Tag         string       `db:"tag"`
		State       bool         `db:"state"`       // 是否启用[true:启用,false:不启用]
		Version     int64        `db:"version"`     // 记录版本号
		DelState    bool         `db:"del_state"`   // 是否删除
		CreateTime  time.Time    `db:"create_time"` // 创建时间
		UpdateTime  time.Time    `db:"update_time"` // 更新时间
		DeleteTime  sql.NullTime `db:"delete_time"` // 删除时间
	}
)

func newCloudBillConfigModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCloudBillConfigModel {
	return &defaultCloudBillConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."cloud_bill_config"`,
	}
}

func (m *defaultCloudBillConfigModel) Insert(ctx context.Context, data *CloudBillConfig) (sql.Result, error) {
	publicCloudBillConfigBillConfIdKey := fmt.Sprintf("%s%v", cachePublicCloudBillConfigBillConfIdPrefix, data.BillConfId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)", m.table, cloudBillConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ConfName, data.ConfType, data.ConfNum, data.BillMode, data.BillAmount, data.Description, data.Tag, data.State, data.Version, data.DelState, data.DeleteTime)
	}, publicCloudBillConfigBillConfIdKey)
	return ret, err
}

func (m *defaultCloudBillConfigModel) FindOne(ctx context.Context, billConfId int64) (*CloudBillConfig, error) {
	publicCloudBillConfigBillConfIdKey := fmt.Sprintf("%s%v", cachePublicCloudBillConfigBillConfIdPrefix, billConfId)
	var resp CloudBillConfig
	err := m.QueryRowCtx(ctx, &resp, publicCloudBillConfigBillConfIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where bill_conf_id = $1 limit 1", cloudBillConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, billConfId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCloudBillConfigModel) Update(ctx context.Context, data *CloudBillConfig) error {
	publicCloudBillConfigBillConfIdKey := fmt.Sprintf("%s%v", cachePublicCloudBillConfigBillConfIdPrefix, data.BillConfId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where bill_conf_id = $1", m.table, cloudBillConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.BillConfId, data.ConfName, data.ConfType, data.ConfNum, data.BillMode, data.BillAmount, data.Description, data.Tag, data.State, data.Version, data.DelState, data.DeleteTime)
	}, publicCloudBillConfigBillConfIdKey)
	return err
}

func (m *defaultCloudBillConfigModel) Delete(ctx context.Context, billConfId int64) error {
	publicCloudBillConfigBillConfIdKey := fmt.Sprintf("%s%v", cachePublicCloudBillConfigBillConfIdPrefix, billConfId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where bill_conf_id = $1", m.table)
		return conn.ExecCtx(ctx, query, billConfId)
	}, publicCloudBillConfigBillConfIdKey)
	return err
}

func (m *defaultCloudBillConfigModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicCloudBillConfigBillConfIdPrefix, primary)
}

func (m *defaultCloudBillConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where bill_conf_id = $1 limit 1", cloudBillConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCloudBillConfigModel) tableName() string {
	return m.table
}
