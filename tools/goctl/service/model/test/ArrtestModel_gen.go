// Code generated by goctl. DO NOT EDIT!

package test

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	arrtestFieldNames          = builder.RawFieldNames(&Arrtest{}, true)
	arrtestRows                = strings.Join(arrtestFieldNames, ",")
	arrtestRowsExpectAutoSet   = strings.Join(stringx.Remove(arrtestFieldNames, "id", "create_time", "update_time"), ",")
	arrtestRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(arrtestFieldNames, "id", "create_time", "update_time"))
)

type (
	arrtestModel interface {
		TestInsert(data *Arrtest) (sql.Result, error)
		Insert(ctx context.Context, data *Arrtest) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Arrtest, error)
		Update(ctx context.Context, data *Arrtest) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArrtestModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Arrtest struct {
		Id   int64  `db:"id"`
		Arr1 string `db:"arr1"`
		Arr2 string `db:"arr2"`
		Arr3 string `db:"arr3"`
	}
)

func newArrtestModel(conn sqlx.SqlConn) *defaultArrtestModel {
	return &defaultArrtestModel{
		conn:  conn,
		table: `"public"."arrtest"`,
	}
}

func (m *defaultArrtestModel) TestInsert(data *Arrtest) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, arrtestRowsExpectAutoSet)
	ret, err := m.conn.Exec(query, data.Arr1, data.Arr2, data.Arr3)
	return ret, err
}

func (m *defaultArrtestModel) Insert(ctx context.Context, data *Arrtest) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, arrtestRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Arr1, data.Arr2, data.Arr3)
	return ret, err
}

func (m *defaultArrtestModel) FindOne(ctx context.Context, id int64) (*Arrtest, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", arrtestRows, m.table)
	var resp Arrtest
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArrtestModel) Update(ctx context.Context, data *Arrtest) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, arrtestRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Arr1, data.Arr2, data.Arr3)
	return err
}

func (m *defaultArrtestModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArrtestModel) tableName() string {
	return m.table
}
